Cig_Tax = datam[49:96,"tax"]/datam[49:96,"cpi"]
model = lm(ln_P_cigar~Sales_Tax)
summary(model)
model = ivreg(ln_Q_cigar~ln_P_cigar,~Sales_Tax)
summary(model)
robust.se(model)
Xhat = c(lm(ln_P_cigar~Sales_Tax)$fitted.values)
summary(lm(ln_Q_cigar~Xhat))
View(CigarettesB)
View(datam)
View(datam)
View(datam)
View(datam)
model = ivreg(ln_Q_cigar~ln_P_cigar,~Sales_Tax)
robust.se(model)
summary(model)
library(car)
library(sem)
install.packages("sem")
library(sem)
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
install.packages("ISLR")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
Direction.2005=Smarket$Direction[!train]
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction)
mean(glm.pred==Direction)
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
library(swirl)
library(swirl)
swirl()
swirl()
mydf. <- read.csv(file = path2csv, stringsAsFactors = FALSE)
mydf. <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
mydf. <- read.csv(path2csv, stringsAsFactors = False)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arc:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
select(cran, -(5:20))
-(5:20)
select(cran, -(5:20))
select(cran, -(x:size))
select(cran, -(ip_id:5))
select(cran, -(package:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_verion == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(C(3,5,NA,10))
!is.na(C(3, 5, NA, 10))
!is.na(C(3, 5, NA, 10))
!is.na(3, 5, NA, 10)
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran, desc(ip_id))
?arrange
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes= mean(size))
OYS_eturauhassyopa <- read.csv("C:/Users/Julius/Downloads/OYS_eturauhassyopa.csv", sep=";", dec=",")
View(OYS_eturauhassyopa)
ers <- OYS_eturauhassyopa
ers
View(ers)
muuttujanimi <- c("EORTC_QOL_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
qolmeans <- data.frame()
ers
muuttujanimi <- c("EORTC_QOL_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
colnames(qolmeans) <- c("mean", "sd")
cor.test(rs$IKA_0, rs$EORTC_EMOTFUNCT_0, use= "complete.obs", method = "pearson")
View(qolmeans)
muuttujanimi <- c("DEPS_total_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
View(qolmeans)
muuttujanimi <- c("SWLS_total_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
View(qolmeans)
ls()
rm()
rm(list=LS())
rm(list=ls())
install.packages("igraph")
library(igraph)
library(igraph)
lazega_advice <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELadv.dat")))
plot(lazega_advice)
researcher_degree_in <- degree(lazega_advice, mode = "in")
advicer_degree_in <- degree(lazega_advice, mode = "in")
advicer_degree_in
plot(lazega_advice, vertex.size= advicer_degree_in*0.5, edge.arrow.size = 0.2)
advicer_closeness <- closeness(lazega_advice, mode="total", normalized=F)
setwd("C:/Users//Julius//yliopisto//kansis//datascience//IODS-project")
alc <- read.csv("data/student_alc.txt")
dim(alc)
colnames(alc)
alc <- read.csv("data/student_alc.txt", header = T)
install.packages("statnet")
library(igraph)
library(statnet)
library(igraph)
library(network)
library(statnet)
library(ergm)
library(intergraph)
install.packages("intergraph")
library(igraph)
library(network)
library(statnet)
library(ergm)
library(intergraph)
lazega_advice <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELadv.dat")))
lazega_friendship <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELfriend.dat")))
lazega_strong_coworker <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELwork.dat")))
lazega_attribures <- el.attr  <- as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELattr.dat"))
lazega_attributes <- el.attr  <- as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELattr.dat"))
library(igraph)
library(network)
library(statnet)
library(ergm)
library(intergraph)
lazega_advice <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELadv.dat")))
lazega_friendship <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELfriend.dat")))
lazega_strong_coworker <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELwork.dat")))
lazega_attribures <- el.attr  <- as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELattr.dat"))
laz_adv <- asNetwork(lazega_advice)
laz_friend <- asNetwork(lazega_friendship)
laz_strong <- asNetwork(lazega_strong_coworker)
laz_friend  <-   network::set.vertex.attribute(laz_friend, "seniority", value = lazega_attribures[,1])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "status", value = lazega_attribures[,2])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "female", value = lazega_attribures[,3])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "office", value = lazega_attribures[,4])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "years_in_firm", value = lazega_attribures[,5])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "age", value = lazega_attribures[,6])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "type_of_law", value = lazega_attribures[,7])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "school", value = lazega_attribures[,8])
?erg.terms
?ergm.terms
?ergm.terms
model1 <- ergm(laz_friend~edges)
model2 <- ergm(laz_friend~edges+mutual)
# load data sets
lazega_advice <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELadv.dat")))
lazega_friendship <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELfriend.dat")))
lazega_strong_coworker <- graph.adjacency(as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELwork.dat")))
lazega_attribures <- el.attr  <- as.matrix(read.table("http://www.stats.ox.ac.uk/~snijders/data/ELattr.dat"))
# change data sets to class network
laz_adv <- asNetwork(lazega_advice)
laz_friend <- asNetwork(lazega_friendship)
laz_strong <- asNetwork(lazega_strong_coworker)
library(igraph)
laz_friend  <-   network::set.vertex.attribute(laz_friend, "seniority", value = lazega_attribures[,1])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "status", value = lazega_attribures[,2])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "female", value = lazega_attribures[,3])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "office", value = lazega_attribures[,4])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "years_in_firm", value = lazega_attribures[,5])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "age", value = lazega_attribures[,6])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "type_of_law", value = lazega_attribures[,7])
laz_friend  <-   network::set.vertex.attribute(laz_friend, "school", value = lazega_attribures[,8])
model1 <- ergm(laz_friend~edges)
model2 <- ergm(laz_friend~edges+mutual)
summary(model1)
summary(model2)
summary(model1)
summary(model1)
summary(model2)
model2 <- ergm(laz_friend~edges+mutual)
summary(model2)
exp(3.38)/exp(1+3.38)
exp((3.38)/(1+3.38))
exp(3.39)/1+exp(3.39))
exp(3.39)/1+exp(3.39)
exp(3.39)/(1+exp(3.39))
summary(model2)
model3 <- ergm(laz_friend~ edges+ mutual + nodematch("school"))
summary(model3)
exp(0.162)/(1+exp(0.162))
summary(model2)
summary(model3)
model4 <- ergm(laz_friend ~ edges + nodematch("school"))
summary(model4)
exp(0.25)/(1+exp(0.25))
?ergm.terms
?ergm.terms
?summary
library(igraph)
setwd("C:/Users/Julius/yliopisto/kansis/datascience/network_analysis/final-project/SNA/")
bank <- read.csv("immediaterisk_clean.csv", sep = ";", dec = ",", row.names = 1)
head(bank)
str(bank)
matrix <- as.matrix(bank)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
g
V(bank)
V(g)
E(g)
E(g)$weight
plot(g, vertex.arrow.width = E(g)$weight)
plot(g, edge.arrow.width = E(g)$weight)
plot(g, edge.arrow.width = E(g)$weight*0.01)
plot(g, edge.arrow.width = E(g)$weight*0.1)
plot(g, edge.arrow.width = E(g)$weight*0.1, edge.arrow.size = 0.1)
plot(g, edge.arrow.width = E(g)$weight*0.5, edge.arrow.size = 0.1)
plot(g, edge.arrow.width = 0.5, edge.arrow.size = 0.1)
plot(g, edge.arrow.width = 0.5, edge.arrow.size)
plot(g, edge.arrow.width = 0.5, edge.arrow.size = 1)
plot(g, edge.arrow.width = 0.5, edge.arrow.size = 0.1)
plot(g, edge.arrow.width = 0.5, arrow.mode = 0)
plot(g, edge.arrow.width = 0.5, edge.arrow.mode = 0)
plot(g, edge.arrow.width = E(g)$weight*0.5, edge.arrow.mode = 0)
E(g)$weight
plot(g, edge.arrow.width = E(g)$weight^2*0.5, edge.arrow.mode = 0)
plot(g, edge.arrow.width = E(g)$weight, edge.arrow.mode = 0)
plot(g, edge.arrow.width = 100, edge.arrow.mode = 0)
plot(g, edge.width = E(g)$weight, edge.arrow.mode = 0)
plot(g, edge.width = E(g)$weight*0.4, edge.arrow.mode = 0)
plot(g, edge.width = E(g)$weight*0.04, edge.arrow.mode = 0)
plot(g, edge.width = E(g)$weight*0.00004, edge.arrow.mode = 0)
0000
plot(g, edge.width = ln(E(g)$weight)*0.004, edge.arrow.mode = 0)
plot(g, edge.width = ln(E(g)$weight*0.004), edge.arrow.mode = 0)
E(g)$weight
ln(E(g)$weight)
plot(g, edge.width = log(E(g)$weight*0.004), edge.arrow.mode = 0)
tkplot(g, edge.width = log(E(g)$weight*0.004), edge.arrow.mode = 0)
plot(g, edge.width = log(E(g)$weight*0.004), edge.arrow.mode = 0, layout = layout_in_circle
plot(g, edge.width = log(E(g)$weight*0.004), edge.arrow.mode = 0, layout = layout_in_circle)
plot(g, edge.width = log(E(g)$weight*0.004), edge.arrow.mode = 0, layout = layout_in_circle)
plot(g, edge.width = log(E(g)$weight*0.004), edge.arrow.mode = 0, layout = layout_in_fr)
plot(g, edge.width = log(E(g)$weight*0.004), edge.arrow.mode = 0, layout = layout_with_fr)
library(dplyr)
colnames(bank)
keep_columns <- c("Austria", "Belgium", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Netherlands","Spain")
bank_eu <- select(bank, one_of(keep_columns))
bank_eu
View(bank_eu)
bank_eu[,1]
bank_eu[1,1]
bank_eu[1,]
rownames(bank)
bank_eu[c(2,3,8,9,10,11,12,13,17,19),]
bank_eu <- bank_eu[c(2,3,8,9,10,11,12,13,17,19),]
g_eu <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
plot(g_eu, edge.width = log(E(g)$weight*0.004), edge.arrow.mode = 0, layout = layout_with_fr)
plot(g_eu, edge.width = log(E(g_eu)$weight*0.004), edge.arrow.mode = 0, layout = layout_with_fr)
matrix_eu <- as.matrix(bank_eu)
matrix_eu <- as.matrix(bank_eu)
matrix <- as.matrix(bank)
g_eu <- graph_from_adjacency_matrix(matrix_eu, 'directed',  weighted = T)
plot(g_eu, edge.width = log(E(g_eu)$weight*0.004), edge.arrow.mode = 0, layout = layout_with_fr)
plot(g_eu, edge.width = E(g_eu)$weight*0.004, edge.arrow.mode = 0, layout = layout_with_fr)
plot(g_eu, edge.width = E(g_eu)$weight*0.004, edge.arrow.mode = 0, layout = layout_with_fr)
plot(g_eu, edge.width = E(g_eu)$weight*0.0004, edge.arrow.mode = 0, layout = layout_with_fr)
plot(g_eu, edge.width = log(E(g_eu)$weight*0.0004), edge.arrow.mode = 0, layout = layout_with_fr)
plot(g_eu, edge.width = log(E(g_eu)$weight*0.04), edge.arrow.mode = 0, layout = layout_with_fr)
plot(g_eu, edge.width = log(E(g_eu)$weight*0.04), edge.arrow.mode = 0)
plot(g, edge.width = log(E(g_eu)$weight*0.04), edge.arrow.mode = 0)
bank[bank == 0] <- NA
bank
bank_eu[bank_eu == 0] <- NA
matrix_eu <- as.matrix(bank_eu)
matrix <- as.matrix(bank)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
g_eu <- graph_from_adjacency_matrix(matrix_eu, 'directed',  weighted = T)
plot(g, edge.width = log(E(g_eu)$weight*0.04), edge.arrow.mode = 0)
plot(g, edge.width = log(E(g_eu)$weight*0.04), edge.arrow.mode = 0)
bank
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
g_eu <- graph_from_adjacency_matrix(matrix_eu, 'directed',  weighted = T)
plot(g, edge.width = log(E(g_eu)$weight*0.04), edge.arrow.mode = 0)
plot(g, edge.arrow.mode = 0)
View(bank_eu)
plot(g, edge.arrow.mode = 0)
E(g)$weigth
E(g)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
V(g)
E(g)
matrix
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
plot(g, edge.width = log(E(g)$) edge.arrow.mode = 0)
plot(g, edge.width = log(E(g)$weigth) edge.arrow.mode = 0)
plot(g, edge.arrow.mode = 0)
bank[is.na(bank)] <- 0
bank_eu[is.na(bank_eu)] <- 0
matrix_eu <- as.matrix(bank_eu)
matrix <- as.matrix(bank)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
g_eu <- graph_from_adjacency_matrix(matrix_eu, 'directed',  weighted = T)
E(g)$weigth
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
setwd("C:/Users/Julius/yliopisto/kansis/datascience/network_analysis/final-project/SNA/")
bank <- read.csv("immediaterisk_clean.csv", sep = ";", dec = ",", row.names = 1)
head(bank, n=2)
str(bank)
keep_columns <- c("Austria", "Belgium", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Netherlands","Spain")
bank_eu <- select(bank, one_of(keep_columns))
bank_eu <- bank_eu[c(2,3,8,9,10,11,12,13,17,19),]
bank[is.na(bank)] <- 0
bank_eu[is.na(bank_eu)] <- 0
bank
matrix_eu <- as.matrix(bank_eu)
matrix <- as.matrix(bank)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
g_eu <- graph_from_adjacency_matrix(matrix_eu, 'directed',  weighted = T)
E(g)$weigth
E(g)$weight
bank[bank == 0] <- NA
bank_eu[bank_eu == 0] <- NA
matrix_eu <- as.matrix(bank_eu)
matrix <- as.matrix(bank)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
g_eu <- graph_from_adjacency_matrix(matrix_eu, 'directed',  weighted = T)
E(g)$weight
plot(g_eu, edge.width = log(E(g_eu)$weight*0.04), edge.arrow.mode = 0)
plot(g, edge.width = graph.strength(g), edge.arrow.mode = 0)
bank[is.na(bank)] <- 0
bank_eu[is.na(bank_eu)] <- 0
plot(g, edge.width = graph.strength(g), edge.arrow.mode = 0)
graph.strength(g)
setwd("C:/Users/Julius/yliopisto/kansis/datascience/network_analysis/final-project/SNA/")
bank <- read.csv("immediaterisk_clean.csv", sep = ";", dec = ",", row.names = 1)
head(bank, n=2)
str(bank)
keep_columns <- c("Austria", "Belgium", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Netherlands","Spain")
bank_eu <- select(bank, one_of(keep_columns))
bank_eu <- bank_eu[c(2,3,8,9,10,11,12,13,17,19),]
bank[is.na(bank)] <- 0
bank_eu[is.na(bank_eu)] <- 0
matrix_eu <- as.matrix(bank_eu)
matrix <- as.matrix(bank)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
g_eu <- graph_from_adjacency_matrix(matrix_eu, 'directed',  weighted = T)
graph.strength(g)
plot(g, edge.width = graph.strength(g), edge.arrow.mode = 0)
plot(g, edge.width = graph.strength(g)*0.001, edge.arrow.mode = 0)
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0)
bank$Australia
bank$US
table(bank$Australia ,bank$US)
hist(bank$Australia, bank$US)
bank$Australia
bank$US
mean(bank$Australia)
mean(bank$US)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0)
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0, layout_with_dh())
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0, layout_with_dh())
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0, layout_with_dh
graph.strength(g)
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0, layout_with_dh)
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0, layout_with_fr())
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0, layout = layout_with_fr)
bank[1]
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0, layout = layout_with_fr)
select(bank, US)
graph.strength(g)
plot(g_eu, edge.width = log(E(g_eu)$weight*0.04), edge.arrow.mode = 0)
plot(g, edge.width = log(graph.strength(g)*0.001), edge.arrow.mode = 0, layout = layout_with_fr)
summary(bank)
library(GGally)
ggpairs(bank)
library(MASS)
describe(bank)
describe(bank)
library(MASS)
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
describe(bank)
bank
View(bank)
bank_eu
data("iris")
plot(iris)
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_sugiyama)
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_graphopt)
plot(g_eu, edge.width = sqrt(E(g_eu)$weight*0.001), edge.arrow.mode = 0)
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_graphopt)
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_lgl)
---
title: "Network analysis - Final Project"
author: "Julius Rissanen"
date: "4 toukokuuta 2017"
output: html_document
---
#Financial stability
Banking connectedness?
Traditional stress testing based on simulation on different scenarios. Commonplace after 2007 financial crisis
"A stress test, in financial terminology, is an analysis or simulation designed to determine the ability of a given financial instrument or financial institution to deal with an economic crisis. Instead of doing financial projection on a "best estimate" basis, a company or its regulators may do stress testing where they look at how robust a financial instrument is in certain crashes, a form of scenario analysis." -Wikipedia
Only microprudential analysis. Macroprudential analysis? -> Network analysis
##Some literature
http://www.elibrary.imf.org/staticfiles/misc/toolkit/pdf/chap13.pdf
http://www.bankofengland.co.uk/research/Documents/ccbs/whfs16/presentation_rajagopal.pdf
https://www.ecb.europa.eu/pub/pdf/other/modellingsystemicrisk012010en.pdf
http://www.sciencedirect.com/science/article/pii/S1572308913000193
#Dataset
Problematic for individual
Access only for aggregates:
http://stats.bis.org/statx/srs/table/b4
#Analysis
```{r, message =F}
library(igraph)
library(dplyr)
library(GGally)
library(Hmisc)
```
```{r}
setwd("C:/Users/Julius/yliopisto/kansis/datascience/network_analysis/final-project/SNA/")
bank <- read.csv("immediaterisk_clean.csv", sep = ";", dec = ",", row.names = 1)
str(bank)
bank
keep_columns <- c("Austria", "Belgium", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Netherlands","Spain")
bank_eu <- select(bank, one_of(keep_columns))
bank_eu <- bank_eu[c(2,3,8,9,10,11,12,13,17,19),]
bank[is.na(bank)] <- 0
bank_eu[is.na(bank_eu)] <- 0
matrix <- as.matrix(bank)
matrix_eu <- as.matrix(bank_eu)
g <- graph_from_adjacency_matrix(matrix, 'directed',  weighted = T)
g_eu <- graph_from_adjacency_matrix(matrix_eu, 'directed',  weighted = T)
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_dh)
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_kk)
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_lgl)
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_graphopt)
plot(g_eu, edge.width = sqrt(E(g_eu)$weight*0.001), edge.arrow.mode = 0)
```
http://kateto.net/networks-r-igraph
plot(g, edge.width = sqrt(E(g)$weight*0.0001), edge.arrow.mode = 0, layout = layout_with_dh)
